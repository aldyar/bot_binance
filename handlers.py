from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
#from monitoring import monitor  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
import asyncio
from request import fetch_data, check_red_candles
from pairs import pairs
import keyboards as kb

monitoring_active = False
router = Router()

@router.message(CommandStart())
async def start_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start. –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è.
    """
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.", reply_markup=kb.main)


@router.message(F.text == '–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞üöÄ')
async def monitor_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /monitor. –ó–∞–ø—É—Å–∫–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    global monitoring_active
    if monitoring_active:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
    else:
        monitoring_active = True  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞—á–∞—Ç! –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...‚è≥")
        await monitor(message)


@router.message(F.text == '–°—Ç–æ–ø‚è∏Ô∏è')
async def stop_monitoring_handler(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /stop. –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    global monitoring_active
    if monitoring_active:
        monitoring_active = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")








async def monitor(message):
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.
    """
    global monitoring_active
    symbols = pairs  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä—ã
    while monitoring_active:  # –ü–æ–∫–∞ —Ñ–ª–∞–≥ true, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç
        for symbol in symbols:
            ohlcv = await fetch_data(symbol)
            if ohlcv and check_red_candles(ohlcv):
                await message.answer(f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —É {symbol} —à–µ—Å—Ç—å –ø–æ–¥—Ä—è–¥ –∫—Ä–∞—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π!")
        await asyncio.sleep(14400)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (14400 —Å–µ–∫—É–Ω–¥)