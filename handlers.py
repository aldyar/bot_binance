from aiogram import Router, F
from aiogram.types import Message
from aiogram.filters import CommandStart, Command
#from monitoring import monitor  # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
import asyncio
from request import fetch_data, check_candle_pattern
from pairs import pairs
import keyboards as kb
import time

monitoring_active = False
router = Router()
import logging

logging.basicConfig(level=logging.INFO)
@router.message(CommandStart())
async def start_handler(message: Message):
    await message.answer("–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.", reply_markup=kb.main)


@router.message(F.text == '–°—Ç–∞—Ä—Ç –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞üöÄ')
async def monitor_handler(message: Message):
    global monitoring_active
    if monitoring_active:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É–∂–µ –∑–∞–ø—É—â–µ–Ω!")
    else:
        monitoring_active = True  # –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç –Ω–∞—á–∞—Ç! –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –≤—Ä–µ–º—è...‚è≥")
        await monitor(message)


@router.message(F.text == '–°—Ç–æ–ø‚è∏Ô∏è')
async def stop_monitoring_handler(message: Message):
    global monitoring_active
    if monitoring_active:
        monitoring_active = False  # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –±—ã–ª –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω.")
    else:
        await message.answer("–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –Ω–µ –±—ã–ª –∑–∞–ø—É—â–µ–Ω.")


async def monitor(message):

    #–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç.

    global monitoring_active
    symbols = pairs  # –î–æ–±–∞–≤—å—Ç–µ –Ω—É–∂–Ω—ã–µ –ø–∞—Ä—ã
    while monitoring_active:  # –ü–æ–∫–∞ —Ñ–ª–∞–≥ true, –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —Ä–∞–±–æ—Ç–∞–µ—Ç
        start_time = time.time()  # –§–∏–∫—Å–∏—Ä—É–µ–º –≤—Ä–µ–º—è –Ω–∞—á–∞–ª–∞ –∏—Ç–µ—Ä–∞—Ü–∏–∏
        for symbol in symbols:
            ohlcv = await fetch_data(symbol)
            result = check_candle_pattern(ohlcv)
            if ohlcv and result:
                binance_symbol = symbol.replace('/', '_')
                binance_link = f"https://www.binance.com/ru/trade/{binance_symbol}?type=spot"
                logging.info(f"–û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –¥–ª—è {symbol}")
                await message.answer(
                    f"üö® –£–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ: —É {symbol} –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ {result} –ø–æ–¥—Ä—è–¥ –∫—Ä–∞—Å–Ω—ã—Ö —Å–≤–µ—á–µ–π!\n"
                    f"üíπ –°—Å—ã–ª–∫–∞ –Ω–∞ –±–∏—Ä–∂—É: [Binance]({binance_link})",
                    disable_web_page_preview=True, parse_mode='Markdown'  # –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä —Å—Å—ã–ª–∫–∏
                )
        elapsed_time = time.time() - start_time
        logging.info(f"–§—É–Ω–∫—Ü–∏—è monitor –∑–∞–Ω—è–ª–∞ {elapsed_time:.2f} —Å–µ–∫—É–Ω–¥")
        await asyncio.sleep(14400)  # –ò–Ω—Ç–µ—Ä–≤–∞–ª –ø—Ä–æ–≤–µ—Ä–∫–∏ (14400 —Å–µ–∫—É–Ω–¥)


